name: Deploy to AWS EC2

on:
  push:
    branches: [ "main" ]  # Runs the workflow on push to the main branch

env:
  AWS_REGION: us-east-1                    # Set your AWS region
  ECR_REPOSITORY: studentperformance       # Set your Amazon ECR repository name
  EC2_PUBLIC_IP: YOUR_EC2_PUBLIC_IP        # Replace with your EC2 instance public IP
  EC2_USER: ec2-user                       # Use 'ubuntu' if deploying on an Ubuntu server

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy to EC2
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Code
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, tag, and push Docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Setup SSH Key for EC2
      run: |
        echo "$SSH_KEY" > private_key.pem
        chmod 600 private_key.pem
      shell: bash
      env:
        SSH_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

    - name: Deploy Application on EC2
      run: |
        ssh -o StrictHostKeyChecking=no -i private_key.pem $EC2_USER@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          # Stop existing Docker container (if running)
          docker stop student-app || true
          docker rm student-app || true
          
          # Pull the latest Docker image
          aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ env.image }}

          # Run the container
          docker run -d -p 5000:5000 --name student-app ${{ env.image }}
        EOF
