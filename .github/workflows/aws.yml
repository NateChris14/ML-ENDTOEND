name: Deploy to EC2

on:
  push:
    branches:
      - main  # Runs only when pushing to main branch

env:
  AWS_REGION: us-east-1                      # Replace with your AWS region
  ECR_REPOSITORY: studentperformance         # Replace with your Amazon ECR repository name
  EC2_PUBLIC_IP: 54.90.169.53                # Replace with your actual EC2 Public IP
  EC2_USER: ubuntu                           # Use 'ubuntu' for Ubuntu EC2 instances

permissions:
  contents: read

jobs:
  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    environment: production

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Build, Tag, and Push Image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
        echo "image=$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG" >> $GITHUB_ENV

    - name: Create Private Key File
      run: |
        echo "${{ secrets.EC2_SSH_KEY }}" | tr -d '\r' | tr -d '\n' > sample-ec2.pem
        chmod 600 sample-ec2.pem

    - name: Deploy to EC2
      run: |
        ssh -tt -o StrictHostKeyChecking=no -i sample-ec2.pem $EC2_USER@${{ env.EC2_PUBLIC_IP }} << 'EOF'
          echo "Connected to EC2!"
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ steps.login-ecr.outputs.registry }}
          docker pull ${{ env.image }}
          docker stop my-python-app || true
          docker rm my-python-app || true
          docker run -d -p 5000:5000 --name my-python-app ${{ env.image }}
          exit
        EOF
